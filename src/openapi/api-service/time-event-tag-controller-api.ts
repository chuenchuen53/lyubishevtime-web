/* tslint:disable */
/* eslint-disable */
/**
 * lyubishevtime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import { AddTimeEventTagRequest } from "../api-typing";
// @ts-ignore
import { AddTimeEventTagResponse } from "../api-typing";
// @ts-ignore
import { ListTimeEventTagResponse } from "../api-typing";
// @ts-ignore
import { ReorderTimeEventTagRequest } from "../api-typing";
// @ts-ignore
import { UpdateTimeEventTagRequest } from "../api-typing";
/**
 * TimeEventTagControllerApi - axios parameter creator
 * @export
 */
export const TimeEventTagControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("_delete", "id", id);
      const localVarPath = `/time-event-tag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AddTimeEventTagRequest} addTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTimeEventTag: async (addTimeEventTagRequest: AddTimeEventTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'addTimeEventTagRequest' is not null or undefined
      assertParamExists("addTimeEventTag", "addTimeEventTagRequest", addTimeEventTagRequest);
      const localVarPath = `/time-event-tag`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(addTimeEventTagRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimeEventTag: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/time-event-tag`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ReorderTimeEventTagRequest} reorderTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reorder: async (reorderTimeEventTagRequest: ReorderTimeEventTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'reorderTimeEventTagRequest' is not null or undefined
      assertParamExists("reorder", "reorderTimeEventTagRequest", reorderTimeEventTagRequest);
      const localVarPath = `/time-event-tag/reorder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(reorderTimeEventTagRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateTimeEventTagRequest} updateTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (updateTimeEventTagRequest: UpdateTimeEventTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'updateTimeEventTagRequest' is not null or undefined
      assertParamExists("update", "updateTimeEventTagRequest", updateTimeEventTagRequest);
      const localVarPath = `/time-event-tag`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateTimeEventTagRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TimeEventTagControllerApi - functional programming interface
 * @export
 */
export const TimeEventTagControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TimeEventTagControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventTagControllerApi._delete"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AddTimeEventTagRequest} addTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addTimeEventTag(
      addTimeEventTagRequest: AddTimeEventTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddTimeEventTagResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeEventTag(addTimeEventTagRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventTagControllerApi.addTimeEventTag"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTimeEventTag(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTimeEventTagResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeEventTag(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventTagControllerApi.listTimeEventTag"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ReorderTimeEventTagRequest} reorderTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reorder(
      reorderTimeEventTagRequest: ReorderTimeEventTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reorder(reorderTimeEventTagRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventTagControllerApi.reorder"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateTimeEventTagRequest} updateTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      updateTimeEventTagRequest: UpdateTimeEventTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(updateTimeEventTagRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventTagControllerApi.update"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TimeEventTagControllerApi - factory interface
 * @export
 */
export const TimeEventTagControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TimeEventTagControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: number, options?: any): AxiosPromise<void> {
      return localVarFp._delete(id, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {AddTimeEventTagRequest} addTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addTimeEventTag(addTimeEventTagRequest: AddTimeEventTagRequest, options?: any): AxiosPromise<AddTimeEventTagResponse> {
      return localVarFp.addTimeEventTag(addTimeEventTagRequest, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimeEventTag(options?: any): AxiosPromise<ListTimeEventTagResponse> {
      return localVarFp.listTimeEventTag(options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {ReorderTimeEventTagRequest} reorderTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reorder(reorderTimeEventTagRequest: ReorderTimeEventTagRequest, options?: any): AxiosPromise<void> {
      return localVarFp.reorder(reorderTimeEventTagRequest, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateTimeEventTagRequest} updateTimeEventTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(updateTimeEventTagRequest: UpdateTimeEventTagRequest, options?: any): AxiosPromise<void> {
      return localVarFp.update(updateTimeEventTagRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * TimeEventTagControllerApi - object-oriented interface
 * @export
 * @class TimeEventTagControllerApi
 * @extends {BaseAPI}
 */
export class TimeEventTagControllerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventTagControllerApi
   */
  public _delete(id: number, options?: RawAxiosRequestConfig) {
    return TimeEventTagControllerApiFp(this.configuration)
      ._delete(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AddTimeEventTagRequest} addTimeEventTagRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventTagControllerApi
   */
  public addTimeEventTag(addTimeEventTagRequest: AddTimeEventTagRequest, options?: RawAxiosRequestConfig) {
    return TimeEventTagControllerApiFp(this.configuration)
      .addTimeEventTag(addTimeEventTagRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventTagControllerApi
   */
  public listTimeEventTag(options?: RawAxiosRequestConfig) {
    return TimeEventTagControllerApiFp(this.configuration)
      .listTimeEventTag(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReorderTimeEventTagRequest} reorderTimeEventTagRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventTagControllerApi
   */
  public reorder(reorderTimeEventTagRequest: ReorderTimeEventTagRequest, options?: RawAxiosRequestConfig) {
    return TimeEventTagControllerApiFp(this.configuration)
      .reorder(reorderTimeEventTagRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateTimeEventTagRequest} updateTimeEventTagRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventTagControllerApi
   */
  public update(updateTimeEventTagRequest: UpdateTimeEventTagRequest, options?: RawAxiosRequestConfig) {
    return TimeEventTagControllerApiFp(this.configuration)
      .update(updateTimeEventTagRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}
