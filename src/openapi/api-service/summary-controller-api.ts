/* tslint:disable */
/* eslint-disable */
/**
 * lyubishevtime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import { GetSummaryResponse } from "../api-typing";
/**
 * SummaryControllerApi - axios parameter creator
 * @export
 */
export const SummaryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary: async (from: string, to: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'from' is not null or undefined
      assertParamExists("getSummary", "from", from);
      // verify required parameter 'to' is not null or undefined
      assertParamExists("getSummary", "to", to);
      const localVarPath = `/summary/{from}/{to}`
        .replace(`{${"from"}}`, encodeURIComponent(String(from)))
        .replace(`{${"to"}}`, encodeURIComponent(String(to)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SummaryControllerApi - functional programming interface
 * @export
 */
export const SummaryControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SummaryControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSummary(
      from: string,
      to: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSummaryResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSummary(from, to, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["SummaryControllerApi.getSummary"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SummaryControllerApi - factory interface
 * @export
 */
export const SummaryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SummaryControllerApiFp(configuration);
  return {
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummary(from: string, to: string, options?: any): AxiosPromise<GetSummaryResponse> {
      return localVarFp.getSummary(from, to, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * SummaryControllerApi - object-oriented interface
 * @export
 * @class SummaryControllerApi
 * @extends {BaseAPI}
 */
export class SummaryControllerApi extends BaseAPI {
  /**
   *
   * @param {string} from
   * @param {string} to
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SummaryControllerApi
   */
  public getSummary(from: string, to: string, options?: RawAxiosRequestConfig) {
    return SummaryControllerApiFp(this.configuration)
      .getSummary(from, to, options)
      .then(request => request(this.axios, this.basePath));
  }
}
