/* tslint:disable */
/* eslint-disable */
/**
 * lyubishevtime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from "../base";
// @ts-ignore
import { AddTimeEventRequest } from "../api-typing";
// @ts-ignore
import { AddTimeEventResponse } from "../api-typing";
// @ts-ignore
import { ListTimeEventResponse } from "../api-typing";
// @ts-ignore
import { UpdateTimeEventRequest } from "../api-typing";
/**
 * TimeEventControllerApi - axios parameter creator
 * @export
 */
export const TimeEventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("_delete", "id", id);
      const localVarPath = `/time-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AddTimeEventRequest} addTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add: async (addTimeEventRequest: AddTimeEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'addTimeEventRequest' is not null or undefined
      assertParamExists("add", "addTimeEventRequest", addTimeEventRequest);
      const localVarPath = `/time-event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(addTimeEventRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {Array<number>} [tagIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents: async (from: string, to: string, tagIds?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'from' is not null or undefined
      assertParamExists("getEvents", "from", from);
      // verify required parameter 'to' is not null or undefined
      assertParamExists("getEvents", "to", to);
      const localVarPath = `/time-event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (tagIds) {
        localVarQueryParameter["tagIds"] = tagIds;
      }

      if (from !== undefined) {
        localVarQueryParameter["from"] = (from as any) instanceof Date ? (from as any).toISOString().substring(0, 10) : from;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] = (to as any) instanceof Date ? (to as any).toISOString().substring(0, 10) : to;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateTimeEventRequest} updateTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (updateTimeEventRequest: UpdateTimeEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'updateTimeEventRequest' is not null or undefined
      assertParamExists("update", "updateTimeEventRequest", updateTimeEventRequest);
      const localVarPath = `/time-event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateTimeEventRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TimeEventControllerApi - functional programming interface
 * @export
 */
export const TimeEventControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TimeEventControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventControllerApi._delete"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AddTimeEventRequest} addTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async add(
      addTimeEventRequest: AddTimeEventRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddTimeEventResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.add(addTimeEventRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventControllerApi.add"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {Array<number>} [tagIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEvents(
      from: string,
      to: string,
      tagIds?: Array<number>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTimeEventResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(from, to, tagIds, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventControllerApi.getEvents"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateTimeEventRequest} updateTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      updateTimeEventRequest: UpdateTimeEventRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(updateTimeEventRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["TimeEventControllerApi.update"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TimeEventControllerApi - factory interface
 * @export
 */
export const TimeEventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TimeEventControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: number, options?: any): AxiosPromise<void> {
      return localVarFp._delete(id, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {AddTimeEventRequest} addTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(addTimeEventRequest: AddTimeEventRequest, options?: any): AxiosPromise<AddTimeEventResponse> {
      return localVarFp.add(addTimeEventRequest, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {string} from
     * @param {string} to
     * @param {Array<number>} [tagIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(from: string, to: string, tagIds?: Array<number>, options?: any): AxiosPromise<ListTimeEventResponse> {
      return localVarFp.getEvents(from, to, tagIds, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateTimeEventRequest} updateTimeEventRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(updateTimeEventRequest: UpdateTimeEventRequest, options?: any): AxiosPromise<void> {
      return localVarFp.update(updateTimeEventRequest, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * TimeEventControllerApi - object-oriented interface
 * @export
 * @class TimeEventControllerApi
 * @extends {BaseAPI}
 */
export class TimeEventControllerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventControllerApi
   */
  public _delete(id: number, options?: RawAxiosRequestConfig) {
    return TimeEventControllerApiFp(this.configuration)
      ._delete(id, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AddTimeEventRequest} addTimeEventRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventControllerApi
   */
  public add(addTimeEventRequest: AddTimeEventRequest, options?: RawAxiosRequestConfig) {
    return TimeEventControllerApiFp(this.configuration)
      .add(addTimeEventRequest, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} from
   * @param {string} to
   * @param {Array<number>} [tagIds]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventControllerApi
   */
  public getEvents(from: string, to: string, tagIds?: Array<number>, options?: RawAxiosRequestConfig) {
    return TimeEventControllerApiFp(this.configuration)
      .getEvents(from, to, tagIds, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateTimeEventRequest} updateTimeEventRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TimeEventControllerApi
   */
  public update(updateTimeEventRequest: UpdateTimeEventRequest, options?: RawAxiosRequestConfig) {
    return TimeEventControllerApiFp(this.configuration)
      .update(updateTimeEventRequest, options)
      .then(request => request(this.axios, this.basePath));
  }
}
